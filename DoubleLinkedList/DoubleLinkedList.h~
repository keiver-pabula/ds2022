/**
 * @file DoubleLinkedList.h
 * @brief DoubleLinkedList 模板类（头文件）
 * 
 * 此算法参考了书本P91-102
 *
 * @author 陈科辉Keiver.P (keiver3034@gmail.com)
 * @date 09 Oct 2022
 */
#include <iostream>

template <typename Object>
class List
{
  private:
    struct Node
    {
      Object data; ///@brief 数据
      Node *prev;  ///@brief 指针，指向上一个
      Node *next;  ///@brief 指针，指向下一个

      ///@brief 构造函数，第一部分的数据为左值，第二部分为右值
      ///@param data d
      ///@param prev p
      ///@param next n
      Node( const Object & d = Object{ }, Node * p = nullptr, Node * n = nullptr )
	: data{ d }, prev{ p }, next{ n}{}

      Node( Object && d, Node * p = nullptr, Node * n = nullptr )
	: data{ std::move( d ) }, prev{ p }, next{ n}{}
    };
  
  public:
  ///@brief public nested(公共迭代) const_iterator（常量迭代器）存储当前节点的指针，初始值为空
    class const_iterator
    {
  /**
   * @brief 给予iteratore一些基本的指针运算符
   *
   * ++(前后置递增，指向当前指针的后一个位置)
   * --(前后置递减，指向当前指针的前一个位置)
   *, *(取值)
   * ==（判断是否是同一个位置，相等返回1）
   * ！=（判断是否不相等,不想等返回1）
   */
    public:
      const_iterator( ) : current{ nullptr }
      { }
      
      const Object & operator* ( ) const
      { return retrieve( ); }

      const_iterator & operator++ ( )
      {
	current = current->next;
	return *this;
      }

      const_iterator operator++ ( int )
      {
	const_iterator old = *this;
	++( *this );
	return old;
      }

      bool operator== ( const const_iterator & rhs ) const
      { return current == rhs.current; }
      
      bool operator!= ( const const_iterator & rhs ) const
      { return !( *this == rhs ); }
      
    protected:
      /// 表示当前位置
      Node *current;

      /// retrieve函数，返回当前位置的data
      Object & retrieve( ) const
      { return current->data; }

      /// 构造函数，构造current指针为p的常量迭代
      const_iterator( Node *p ) : current{ p }{ }

      /// 用于共享list和const_iterator
      friend class List<Object>;
    };

  /**
  *
  *@brief 创建迭代 
  *初始化迭代器
  * @brief 给予iteratore一些基本的指针运算符
  *
  * ++(前后置递增，指向当前指针的后一个位置)
  * --(前后置递减，指向当前指针的前一个位置)
  *, *(取值)
  * ==（判断是否是同一个位置，相等返回1）
  * ！=（判断是否不相等,不想等返回1）
  */
  class iterator : public const_iterator
    {
    public:
      iterator( )
      { }
      
      Object & operator* ( )
      { return const_iterator::retrieve( ); }
      
      const Object & operator* ( ) const
      { return const_iterator::operator*( ); }

      iterator & operator++ ( )
      {
	this->current = this->current->next;
	return *this;
      }

      iterator operator++ ( int )
      {
	iterator old = *this;
	++( *this );
	return old;
      }

    protected:
      iterator( Node *p ) : const_iterator{ p }
      { }

      friend class List<Object>;
    };

  public:
  ///创造一个空的双链表
    List( )
    { init( ); }

  ///初始化一个空的双链表
    List( const List & rhs )
    {
      init( );
      for( auto & x : rhs )
	push_back( x );
    }

  ///析构函数
    ~List( )
    {
      clear( );
      delete head;
      delete tail;
    }
  
  ///复制赋值（=）操作
    List & operator= ( const List & rhs )
    {
      List copy = rhs;
      std::swap( *this, copy );
      return *this;
    }

  ///移动构造函数，将List函数右值作为参数
    List( List && rhs )
      : theSize{ rhs.theSize }, head{ rhs.head }, tail{ rhs.tail }
    {
      rhs.theSize = 0;
      rhs.head = nullptr;
      rhs.tail = nullptr;
    }

  ///重载赋值（=）操作
    List & operator= ( List && rhs )
    {
      std::swap( theSize, rhs.theSize );
      std::swap( head, rhs.head );
      std::swap( tail, rhs.tail );

      return *this;
    }

  /**
  *
  * @brief 构造各类函数
  *
  * begin() 调取list的开头位置
  * begin（）const 调取list的开头位置常量
  * end() 调取list的末尾位置
  * end（）const 调取list的末尾位置常量
  * size（）取得链表大小（长度）
  * empty（）判断链表是否是空
  * clear()清空链表
  */
     iterator begin( )
     { return { head->next }; }
  
     const_iterator begin( ) const
     { return { head->next }; }
  
     iterator end( )
     { return { tail }; }
  
     const_iterator end( ) const
     { return { tail }; }

     int size( ) const
     { return theSize; }
  
     bool empty( ) const
     { return size( ) == 0; }

     void clear( )
     {
       while( !empty( ) )
	 pop_front( );
      }

  /**
  *
  * @brief   各类函数
  *
  * front()取得链表开头位置的data
  * front() const 取得链表开头位置的data const(数据常量)
  * back()取得链表末尾位置的data
  * back() const 取得链表末尾位置的data const(数据常量)
  * push_front() 在链表开头位置插入左/右值x，数据类型为DT
  * push_back() 在链表末尾位置插入左/右值x，数据类型为DT
  * pop_front() 去除链表的开头
  * pop_front() 去除链表的末尾
  */
     Object & front( )
     { return *begin( ); }
     const Object & front( ) const
     { return *begin( ); }
  
     Object & back( )
     { return *--end( ); }
      const Object & back( ) const
     { return *--end( ); }
  
     void push_front( const Object & x )
     { insert( begin( ), x ); }
     void push_front( Object && x )
     { insert( begin( ), std::move( x ) ); }
  
     void push_back( const Object & x )
     { insert( end( ), x ); }
     void push_back( Object && x )
     { insert( end( ), std::move( x ) ); }
  
     void pop_front( )
     { erase( begin( ) ); }
     void pop_back( )
     { erase( --end( ) ); }

  ///printList（）输出当前列表的值（取自课上的函数）
     void PrintList()
     {     
       //  for (Node* it=head; it != nullptr; it = it->next)
        for (it = begin(); it!= end(); it++) 
         std::cout << *it     << "\t";
         std::cout << "\b" << std::endl;
     };
  
/**
  *
  * @brief insert() 插入新节点
  *
  * itr为插入位置(在itr位置的前面)
  * @param x 插入的左值
  * @return 插入后的新链表
  */
   iterator insert( iterator itr, const Object & x )
     {
     Node *p = itr.current;
     theSize++;
     return { p->prev = p->prev->next = new Node{ x, p->prev, p }     };}

  /**
  *
  * @brief insert() 插入新节点
  *
  * itr  插入位置(在itr位置的前面)
  * @param x 插入的右值
  * @return 插入后的新链表
  */
   iterator insert( iterator itr, Object && x )
     {
       Node *p = itr.current;
       theSize++;
       return { p->prev = p->prev->next
	   = new Node{ std::move( x ), p->prev, p }};
     }
/**
  * @brief insert() 删除节点
  *
  * itr为删除位置
  * @return 删除后的新链表
  */
   iterator erase( iterator itr )
     {
       Node *p = itr.current;
       iterator retVal{ p->next };
       p->prev->next = p->next;
       p->next->prev = p->prev;
       delete p;
       theSize--;
       return retVal;
     }

  /**
  * @brief insert() 删除多个节点
  *
  * from开始删除节点的位置
  * to结束删除节点的位置
  * @return 删除后的新链表
  */
   iterator erase( iterator from, iterator to )
     {
       for( iterator itr = from; itr != to; )
	itr = erase( itr );
       return to;
     }


    private:
  ///大小; 头节点head的指针;尾节点tail的指针
        int theSize;
        Node *head;
        Node *tail;
  ///链表初始化
        void init( )
        {
	  theSize = 0;
	  head = new Node;
	  tail = new Node;
	  head->next = tail;
	  tail->prev = head;
	}
};
